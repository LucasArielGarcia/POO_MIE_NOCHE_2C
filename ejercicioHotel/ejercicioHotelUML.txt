@startuml
class Habitacion{
-habitacionesPorPiso: Hashmap
-numeroHabitacion: int
-pisoHabitacion: int
-precioHabitacion:double
-estadoHabitacion: EstadoHabitacion
+{abstract} double calcularPrecio()
+{abstract} double calcularSeña()
+sosHabitacion(pisoHabitacion: int,numeroHabitacion: int)
}

class HabitacionSimple{
+{abstract} double calcularPrecio()
+{abstract} double calcularSeña()
}
class HabitacionMatrimonial{
+{abstract} double calcularPrecio()
+{abstract} double calcularSeña()
}
class HabitacionDoble{
+{abstract} double calcularPrecio()
+{abstract} double calcularSeña()
}

enum EstadoHabitacion {
  OCUPADA
  DISPONIBLE
}


class Cliente{
-contadorId: static int
-idCliente: int
-dni: int
-nombre: String
-tipoCliente: TipoCliente
-cantidadReservas: int
+void registrarCliente(dni: int, nombre: String)
}
enum TipoCliente {
  HABITUAL
  ESPORADICO
}
class Reserva{
- idReserva: int
-cliente: Cliente
-habitacion: Habitacion
-fechaComienzo: Date
-fechaHasta: Date
-cantidadDias: int
-importeSeña: double
-importeTotal: double
-importeAbonado: double
+void registrarReserva(cliente: Cliente, habitacion: Habitacion, fechaComienzo: Date, importeSeña: double)
+ boolean sosReserva(int: id)
+ void abonarReserva(double abono)
}
enum EstadoReserva {
 ESPERA
 TOMADA
 CUMPLIDA
 SEÑADA
 VENCIDA
}

class Controlador{
- List<Habitacion> listHabitaciones
- List<Cliente> listClientes
- List<Reserva> listReservas
void habitacionesDisponibles(fechaDesde: Date, fechaHasta: Date)
void registrarCliente(dni: int, nombre: String)
void registrarReserva(dni: int, numeroHabitacion: int, fechaDesde: Date, fechaHasta: Date)

}

Habitacion <|-- HabitacionSimple
Habitacion <|-- HabitacionMatrimonial
Habitacion <|-- HabitacionDoble
Habitacion o-- EstadoHabitacion
Cliente o-- TipoCliente
Reserva o-- EstadoReserva
Reserva o--"1..1" Habitacion
Reserva o-- "1..1" Cliente
Controlador *-- Reserva
Controlador *-- Cliente
Controlador *-- Habitacion




@enduml